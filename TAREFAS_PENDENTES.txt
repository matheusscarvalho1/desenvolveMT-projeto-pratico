PROJETO PRÁTICO DESENVOLVE MT - TAREFAS PENDENTES
====================================================

ANÁLISE ATUAL DO PROJETO:
- ✅ Lazy Loading implementado (React.lazy + Suspense)
- ✅ Rotas configuradas (Home, Details, Error)
- ✅ Paginação funcional implementada
- ✅ Filtros de busca funcionando
- ✅ Cards de pessoas desaparecidas
- ✅ Navegação para detalhes
- ✅ Formulário para adicionar informações
- ✅ Tratamento de erros básico
- ✅ Design responsivo com Tailwind CSS
- ✅ Componentes shadcn/ui implementados

TAREFAS PENDENTES PARA COMPLETAR O PROJETO:
============================================

1. CORREÇÃO DE URL DA API
-------------------------
PROBLEMA: URL incorreta na Home.tsx
ATUAL: "/pessoas/aberto/filtro"
CORRETO: "/v1/pessoas/aberto/filtro"

SOLUÇÃO:
```typescript
// src/pages/Home/Home.tsx - linha ~130
const response = await api.get("/v1/pessoas/aberto/filtro", {
  params: requestParams,
});
```

2. CORREÇÃO DE URL NO DIALOG DETAILS
-------------------------------------
PROBLEMA: URL incorreta no DialogDetailsCard.tsx
ATUAL: "/ocorrencias/informacoes-desaparecido"
CORRETO: "/v1/ocorrencias/informacoes-desaparecido"

SOLUÇÃO:
```typescript
// src/pages/Details/components/DialogDetailsCard.tsx - linha ~100
const url = `/v1/ocorrencias/informacoes-desaparecido?${queryParams.toString()}`;
```

3. IMPLEMENTAÇÃO DE MÁSCARAS DE ENTRADA
----------------------------------------
REQUISITO: Aplicar máscaras onde necessário (datas, telefones)

IMPLEMENTAÇÃO:
```bash
npm install react-input-mask
```

```typescript
// src/components/ui/masked-input.tsx
import { forwardRef } from "react";
import InputMask from "react-input-mask";

interface MaskedInputProps {
  mask: string;
  placeholder?: string;
  className?: string;
  value?: string;
  onChange?: (value: string) => void;
}

export const MaskedInput = forwardRef<HTMLInputElement, MaskedInputProps>(
  ({ mask, placeholder, className, value, onChange }, ref) => {
    return (
      <InputMask
        mask={mask}
        value={value}
        onChange={(e) => onChange?.(e.target.value)}
      >
        {(inputProps: any) => (
          <input
            {...inputProps}
            ref={ref}
            className={className}
            placeholder={placeholder}
          />
        )}
      </InputMask>
    );
  }
);

MaskedInput.displayName = "MaskedInput";
```

4. MELHORIA NO TRATAMENTO DE ERROS
-----------------------------------
IMPLEMENTAR: Tratamento mais robusto de erros HTTP

```typescript
// src/lib/error-handler.ts
export class ApiError extends Error {
  constructor(
    public status: number,
    public message: string,
    public code?: string
  ) {
    super(message);
    this.name = "ApiError";
  }
}

export const handleApiError = (error: unknown): string => {
  if (error instanceof ApiError) {
    switch (error.status) {
      case 400:
        return "Dados inválidos. Verifique as informações.";
      case 401:
        return "Não autorizado. Faça login novamente.";
      case 403:
        return "Acesso negado.";
      case 404:
        return "Recurso não encontrado.";
      case 500:
        return "Erro interno do servidor. Tente novamente.";
      default:
        return error.message;
    }
  }
  
  if (error instanceof Error) {
    return error.message;
  }
  
  return "Erro desconhecido. Tente novamente.";
};
```

5. IMPLEMENTAÇÃO DE LOADING STATES
----------------------------------
ADICIONAR: Loading states para todas as operações assíncronas

```typescript
// src/hooks/useLoading.ts
import { useState, useCallback } from "react";

export const useLoading = (initialState = false) => {
  const [loading, setLoading] = useState(initialState);
  
  const withLoading = useCallback(async (fn: () => Promise<void>) => {
    setLoading(true);
    try {
      await fn();
    } finally {
      setLoading(false);
    }
  }, []);
  
  return { loading, setLoading, withLoading };
};
```

6. VALIDAÇÃO DE FORMULÁRIOS MELHORADA
--------------------------------------
IMPLEMENTAR: Validação mais robusta com Zod

```typescript
// src/schemas/form-schemas.ts
import { z } from "zod";

export const personInfoSchema = z.object({
  informacao: z.string()
    .min(10, "Informação deve ter pelo menos 10 caracteres")
    .max(1000, "Informação muito longa"),
  descricao: z.string()
    .min(5, "Descrição deve ter pelo menos 5 caracteres")
    .max(200, "Descrição muito longa"),
  data: z.date({
    required_error: "Data é obrigatória",
    invalid_type_error: "Data inválida",
  }),
  localizacao: z.string()
    .min(5, "Localização deve ter pelo menos 5 caracteres")
    .max(200, "Localização muito longa"),
  files: z.array(z.instanceof(File))
    .max(5, "Máximo de 5 arquivos permitidos")
    .optional(),
});

export type PersonInfoFormData = z.infer<typeof personInfoSchema>;
```

7. IMPLEMENTAÇÃO DE NOTIFICAÇÕES
---------------------------------
MELHORAR: Sistema de notificações com toast

```typescript
// src/lib/notifications.ts
import { toast } from "sonner";

export const showSuccess = (message: string) => {
  toast.success(message, {
    duration: 4000,
    position: "bottom-right",
  });
};

export const showError = (message: string) => {
  toast.error(message, {
    duration: 6000,
    position: "bottom-right",
  });
};

export const showInfo = (message: string) => {
  toast.info(message, {
    duration: 4000,
    position: "bottom-right",
  });
};
```

8. IMPLEMENTAÇÃO DE TESTES
---------------------------
ADICIONAR: Testes unitários e de integração

```bash
npm install -D vitest @testing-library/react @testing-library/jest-dom jsdom
```

```typescript
// vitest.config.ts
import { defineConfig } from "vitest/config";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()],
  test: {
    environment: "jsdom",
    setupFiles: ["./src/test/setup.ts"],
  },
});
```

9. IMPLEMENTAÇÃO DE DOCKER
---------------------------
CRIAR: Dockerfile e docker-compose.yml

```dockerfile
# Dockerfile
FROM node:18-alpine AS builder

WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

```yaml
# docker-compose.yml
version: '3.8'
services:
  app:
    build: .
    ports:
      - "80:80"
    environment:
      - VITE_API_BASE_URL=https://abitus-api.geia.vip
```

12. IMPLEMENTAÇÃO DE LOGS E MONITORAMENTO
------------------------------------------
ADICIONAR: Sistema de logs para debugging

```typescript
// src/lib/logger.ts
export const logger = {
  info: (message: string, data?: any) => {
    console.log(`[INFO] ${message}`, data);
  },
  error: (message: string, error?: any) => {
    console.error(`[ERROR] ${message}`, error);
  },
  warn: (message: string, data?: any) => {
    console.warn(`[WARN] ${message}`, data);
  },
};

PRIORIDADES DE IMPLEMENTAÇÃO:
============================

ALTA PRIORIDADE (Implementar primeiro):
1. Correção das URLs da API
2. Implementação de máscaras de entrada
3. Melhoria no tratamento de erros
4. Implementação de loading states
5. Validação de formulários melhorada

MÉDIA PRIORIDADE:
6. Sistema de notificações
7. Variáveis de ambiente
8. Docker
9. Testes unitários

BAIXA PRIORIDADE (Opcional):
10. PWA
11. Cache e performance
12. Acessibilidade
13. Internacionalização
14. Logs e monitoramento

ESTRUTURA FINAL RECOMENDADA:
============================

```
src/
├── components/
│   ├── ui/           # Componentes base
│   ├── common/       # Componentes reutilizáveis
│   └── layout/       # Componentes de layout
├── hooks/            # Custom hooks
├── lib/              # Utilitários e configurações
├── schemas/          # Schemas de validação
├── services/         # Serviços da API
├── stores/           # Estado global (se necessário)
├── types/            # Tipos TypeScript
├── utils/            # Funções utilitárias
└── pages/            # Páginas da aplicação
```

COMANDOS PARA IMPLEMENTAÇÃO:
===========================

```bash
# 1. Instalar dependências necessárias
npm install react-input-mask react-i18next i18next

# 2. Instalar dependências de desenvolvimento
npm install -D vitest @testing-library/react @testing-library/jest-dom jsdom

# 3. Criar estrutura de pastas
mkdir -p src/{hooks,lib,schemas,services,stores,types,utils,components/{common,layout}}

# 4. Executar testes
npm run test

# 5. Build de produção
npm run build

# 6. Docker build
docker build -t pessoas-desaparecidas-mt .
```

NOTAS IMPORTANTES:
==================

1. Sempre manter o código limpo e organizado
2. Usar TypeScript strict mode
3. Implementar tratamento de erros robusto
4. Seguir padrões de acessibilidade (WCAG)
5. Testar em diferentes dispositivos e navegadores
6. Documentar todas as funcionalidades
7. Manter performance otimizada
8. Implementar lazy loading para rotas
9. Usar React.memo para componentes pesados
10. Implementar error boundaries

ESTADO ATUAL: 70% COMPLETO
PRÓXIMO PASSO: Implementar correções de URL e máscaras de entrada

